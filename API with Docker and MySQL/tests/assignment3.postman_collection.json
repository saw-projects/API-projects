{
	"info": {
		"_postman_id": "6c1ac522-7e38-40d3-89c3-9bc5b4642429",
		"name": "assignment3",
		"description": "This collection tests the API specification given for Assignment 2.  \nIn order to run this collection, use the environment file assignment2.environment.json. That environment file has some predefined variables needed by the tests in this collection. There is only one variable in that file that you need to set when running your collection\n\napp_url\n\n- Set the value of this variable to the URL of your app. E.g., when running locally set it to [http://127.0.0.1:8080](http://127.0.0.1:8080). When running the app on GCP. set it to the URL of your app on GCP, e.g., [https://a2-chaudhrn-osu.uc.r.appspot.com](https://a2-chaudhrn-osu.uc.r.appspot.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9037348"
	},
	"item": [
		{
			"name": "1. Create a business (6 pts)",
			"item": [
				{
					"name": "1. add business 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"let points = 0; ",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(respJSON[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(respJSON[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(respJSON[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(respJSON[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(respJSON[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(respJSON).to.have.property(\"id\");",
									"    pm.expect(respJSON[\"id\"]).to.be.a('number');",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/businesses/' + respJSON[\"id\"]);",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Create a business Test 1 points = ' + points);",
									"console.log('******* Create a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_create\", points);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add business with missing attributes 400 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.75",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.75",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"",
									"console.log('******* Create a business Test 2 points = ' + points);",
									"let points_business_create = pm.environment.get(\"points_business_create\") + points",
									"console.log('******* Create a business Tests current points = ' + points_business_create);",
									"pm.environment.set(\"points_business_create\", points_business_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add second business 201 (2 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(respJSON[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(respJSON[\"street_address\"]).to.eq(\"321 South Mopac\");",
									"    pm.expect(respJSON[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(respJSON[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(respJSON[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(respJSON).to.have.property(\"id\");",
									"    pm.expect(respJSON[\"id\"]).to.be.a('number')",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/businesses/' + respJSON[\"id\"]);",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Create a business Test 3 points = ' + points);",
									"let points_business_create = pm.environment.get(\"points_business_create\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Create a business Tests Total points = ' + points_business_create);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_create\", points_business_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Get a business (6 pts)",
			"item": [
				{
					"name": "1. get a business 200 (4 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"id\"]).to.eq(pm.environment.get(\"business_id_1\"));",
									"    pm.expect(respJSON[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(respJSON[\"name\"]).to.eq(\"Mandola's\");",
									"    pm.expect(respJSON[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(respJSON[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(respJSON[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(respJSON[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/businesses/' + respJSON[\"id\"]);",
									"    points += 3",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"",
									"console.log('******* Get a business Test 1 points = ' + points);",
									"console.log('******* Get a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get business with invalid id 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"",
									"console.log('******* Get a business Test 2 points = ' + points);",
									"let points_business_get = pm.environment.get(\"points_business_get\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Get a business Tests Total points = ' + points_business_get);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_get\", points_business_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{invalid_business_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{invalid_business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. List all businesses  with pagination (9 pts)",
			"item": [
				{
					"name": "1. add business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add 2nd business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_4\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add 3rd business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_5\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"El Dorado\",\r\n  \"street_address\": \"323 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. add 4th business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_6\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. add 5th business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_7\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. add business for owner 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_8\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_2}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. add 2nd business for owner 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_9\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_2}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. get 1st page of businesses (4 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"pm.test(\"Exaclty 3 businesses on the page\", function(){\r",
									"   pm.expect(pm.response.json()['entries'].length).to.eq(3);\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"pm.test(\"Every business has all the required properties\", function(){\r",
									"    const businesses = pm.response.json()['entries'];\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business).to.have.property(\"id\");\r",
									"        pm.expect(business).to.have.property(\"name\");\r",
									"        pm.expect(business).to.have.property(\"owner_id\");\r",
									"        pm.expect(business).to.have.property(\"street_address\");\r",
									"        pm.expect(business).to.have.property(\"city\");\r",
									"        pm.expect(business).to.have.property(\"state\");\r",
									"        pm.expect(business).to.have.property(\"zip_code\");\r",
									"        pm.expect(business[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' + business[\"id\"]);\r",
									"    }\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"pm.test(\"The next link is correct\", function(){\r",
									"    pm.expect(pm.response.json()['next']).to.be.oneOf([\r",
									"            pm.environment.get(\"app_url\") + '/businesses?offset=3&limit=3',\r",
									"            pm.environment.get(\"app_url\") + '/businesses?limit=3&offset=3']);\r",
									"    points += 1.5;\r",
									"});\r",
									"\r",
									"console.log('******* List all businesses Test 8 points = ' + points);\r",
									"console.log('******* List all businesses Tests current points = ' + points);\r",
									"pm.environment.set(\"points_business_list_all\", points);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. get 2nd page of businesses (4 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"pm.test(\"Exaclty 3 businesses on the page\", function(){\r",
									"   pm.expect(pm.response.json()['entries'].length).to.eq(3);\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"pm.test(\"Every business has all the required properties\", function(){\r",
									"    const businesses = pm.response.json()['entries'];\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business).to.have.property(\"id\");\r",
									"        pm.expect(business).to.have.property(\"name\");\r",
									"        pm.expect(business).to.have.property(\"owner_id\");\r",
									"        pm.expect(business).to.have.property(\"street_address\");\r",
									"        pm.expect(business).to.have.property(\"city\");\r",
									"        pm.expect(business).to.have.property(\"state\");\r",
									"        pm.expect(business).to.have.property(\"zip_code\");\r",
									"        pm.expect(business[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' + business[\"id\"]);\r",
									"    }\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"pm.test(\"The next link is correct\", function(){\r",
									"    pm.expect(pm.response.json()['next']).to.be.oneOf([\r",
									"            pm.environment.get(\"app_url\") + '/businesses?offset=6&limit=3',\r",
									"            pm.environment.get(\"app_url\") + '/businesses?limit=3&offset=6']);\r",
									"    points += 1.5;\r",
									"});\r",
									"\r",
									"\r",
									"console.log('******* List all businesses Test 9 points = ' + points);\r",
									"let points_business_list_all = pm.environment.get(\"points_business_list_all\") + points\r",
									"console.log('******* List all businesses Tests Current points = ' + points_business_list_all);\r",
									"pm.environment.set(\"points_business_list_all\", points_business_list_all);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses?offset=3&limit=3",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10. get 3rd page of businesses (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"At least one business on the page\", function(){\r",
									"   pm.expect(pm.response.json()['entries'].length).to.be.at.least(1);\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"pm.test(\"Every business has all the required properties\", function(){\r",
									"    const businesses = pm.response.json()['entries'];\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business).to.have.property(\"id\");\r",
									"        pm.expect(business).to.have.property(\"name\");\r",
									"        pm.expect(business).to.have.property(\"owner_id\");\r",
									"        pm.expect(business).to.have.property(\"street_address\");\r",
									"        pm.expect(business).to.have.property(\"city\");\r",
									"        pm.expect(business).to.have.property(\"state\");\r",
									"        pm.expect(business).to.have.property(\"zip_code\");\r",
									"        pm.expect(business[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' + business[\"id\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log('******* List all businesses Test 10 points = ' + points);\r",
									"let points_business_list_all = pm.environment.get(\"points_business_list_all\") + points\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* List all businesses Tests Total points = ' + points);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_business_list_all\", points_business_list_all);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses?offset=6&limit=3",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							],
							"query": [
								{
									"key": "offset",
									"value": "6"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"for(let i = 4; i < 10; i++){",
									"    let business_id = pm.environment.get(\"business_id_\" + i)",
									"    pm.sendRequest({",
									"            url: pm.environment.get(\"app_url\") + \"/businesses/\" + business_id,",
									"            method: 'DELETE'",
									"        },",
									"        function(err, response) {",
									"            pm.expect(response.code).to.eql(204)",
									"        }",
									"    )",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Edit a business (6 pts)",
			"item": [
				{
					"name": "1. edit business 200 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"id\"]).to.eq(pm.environment.get(\"business_id_1\"));",
									"    pm.expect(respJSON[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(respJSON[\"name\"]).to.eq(\"Mandola's Italian\");",
									"    pm.expect(respJSON[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(respJSON[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(respJSON[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(respJSON[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/businesses/' + respJSON[\"id\"]);",
									"    points += 1",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5",
									"});",
									"",
									"console.log('******* Edit a business Test 1 points = ' + points);",
									"console.log('******* Edit a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_edit\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's Italian\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get business after update 200 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"owner_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"owner_id_1\")));",
									"    pm.expect(respJSON[\"name\"]).to.eq(\"Mandola's Italian\");",
									"    pm.expect(respJSON[\"street_address\"]).to.eq(\"4900 N Lamar Blvd\");",
									"    pm.expect(respJSON[\"city\"]).to.eq(\"Austin\");",
									"    pm.expect(respJSON[\"state\"]).to.eq(\"TX\");",
									"    pm.expect(respJSON[\"zip_code\"]).to.eq(78751);",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/businesses/' + respJSON[\"id\"]);",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Edit a business Test 2 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests current points = ' + points_business_edit);",
									"pm.environment.set(\"points_business_edit\", points_business_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. edit business with missing attributes 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a business Test 3 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests current points = ' + points_business_edit);",
									"pm.environment.set(\"points_business_edit\", points_business_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": 123,\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. edit business with invalid id 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a business Test 4 points = ' + points);",
									"let points_business_edit = pm.environment.get(\"points_business_edit\") + points",
									"console.log('******* Edit a business Tests Total points = ' + points_business_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Edit a business Tests Total points = ' + points_business_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_edit\", points_business_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's Italian\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}\r\n"
						},
						"url": {
							"raw": "{{app_url}}/businesses/{{invalid_business_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{invalid_business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Delete a business (6 pts)",
			"item": [
				{
					"name": "1. delete business 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"console.log('******* Delete a business Test 1 points = ' + points);",
									"console.log('******* Delete a business Tests current points = ' + points);",
									"pm.environment.set(\"points_business_delete\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. delete business just deleted 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 1;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 1;",
									"});",
									"",
									"console.log('******* Delete a business Test 2 points = ' + points);",
									"let points_business_delete = pm.environment.get(\"points_business_delete\") + points",
									"console.log('******* Delete a business Tests current points = ' + points_business_delete);",
									"pm.environment.set(\"points_business_delete\", points_business_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. delete second business 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"",
									"console.log('******* Delete a business Test 3 points = ' + points);",
									"let points_business_delete = pm.environment.get(\"points_business_delete\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Deletee a business Tests Total points = ' + points_business_delete);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_business_delete\", points_business_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. List businesses for owner (6 pts)",
			"item": [
				{
					"name": "1. add business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add 2nd business for owner 1 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add business for owner 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_2}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. get all businesses for owner 1 (3 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"pm.test(\"At least 2 businesses for owner 1\", function(){\r",
									"   pm.expect(pm.response.json().length).to.be.above(1);\r",
									"   points += 0.75;\r",
									"});\r",
									"\r",
									"pm.test(\"Owner ID is correct for all businesses\", function(){\r",
									"    const businesses = pm.response.json();\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business[\"owner_id\"]).to.eq(parseInt(pm.environment.get(\"owner_id_1\")));\r",
									"    }\r",
									"   points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"Every business has all the required properties\", function(){\r",
									"    const businesses = pm.response.json();\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business).to.have.property(\"id\");\r",
									"        pm.expect(business).to.have.property(\"name\");\r",
									"        pm.expect(business).to.have.property(\"owner_id\");\r",
									"        pm.expect(business).to.have.property(\"street_address\");\r",
									"        pm.expect(business).to.have.property(\"city\");\r",
									"        pm.expect(business).to.have.property(\"state\");\r",
									"        pm.expect(business).to.have.property(\"zip_code\");\r",
									"        pm.expect(business[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' + business[\"id\"]);\r",
									"    }\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* List businesses for owner, Test 5 points = ' + points);\r",
									"pm.environment.set(\"points_list_businesses_for_owner\", points);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/owners/{{owner_id_1}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"owners",
								"{{owner_id_1}}",
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. get all businesses for owner 2 (3 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25;\r",
									"}); \r",
									"\r",
									"pm.test(\"At least 1 business for owner 2\", function(){\r",
									"   pm.expect(pm.response.json().length).to.be.above(0);\r",
									"   points += 0.75;\r",
									"});\r",
									"\r",
									"pm.test(\"Owner ID is correct for all businesses\", function(){\r",
									"    const businesses = pm.response.json();\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business[\"owner_id\"]).to.eq(parseInt(pm.environment.get(\"owner_id_2\")));\r",
									"    }\r",
									"   points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"Every business has all the required properties\", function(){\r",
									"    const businesses = pm.response.json();\r",
									"    for (const business of businesses){\r",
									"        pm.expect(business).to.have.property(\"id\");\r",
									"        pm.expect(business).to.have.property(\"name\");\r",
									"        pm.expect(business).to.have.property(\"owner_id\");\r",
									"        pm.expect(business).to.have.property(\"street_address\");\r",
									"        pm.expect(business).to.have.property(\"city\");\r",
									"        pm.expect(business).to.have.property(\"state\");\r",
									"        pm.expect(business).to.have.property(\"zip_code\");\r",
									"        pm.expect(business[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' + business[\"id\"]);\r",
									"    }\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"\r",
									"console.log('******* List businesses for owner, Test 6 points = ' + points);\r",
									"let points_list_businesses_for_owner = pm.environment.get(\"points_list_businesses_for_owner\") + points\r",
									"pm.environment.set(\"points_list_businesses_for_owner\", points_list_businesses_for_owner);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* List businesses for owner total points = ' + points_list_businesses_for_owner);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/owners/{{owner_id_2}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"owners",
								"{{owner_id_2}}",
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. delete 2nd business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. delete 3rd business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Create a review (8 pts)",
			"item": [
				{
					"name": "1. add business  201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"points_review_crud\", 0);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Torchy Tacos\",\r\n  \"street_address\": \"5100 Burnet Road\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78703\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add review 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"review_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(respJSON[\"stars\"]).to.eq(4);",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"Excellent tacos!\");",
									"    pm.expect(respJSON).to.have.property(\"id\");",
									"    pm.expect(respJSON[\"id\"]).to.be.a('number');",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/reviews/' + respJSON[\"id\"]);",
									"    pm.expect(respJSON[\"business\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 2 points = ' + points);",
									"console.log('******* Create a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_create\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add review again 409 (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"409 status code\", function () {",
									"    pm.response.to.have.status(409);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"409 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You have already submitted a review for this business. You can update your previous review, or delete it and submit a new review\");",
									"     points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 3 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. add review 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Create a review Test 4 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. add review invalid business 404 (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No business with this business_id exists\");",
									"     points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 5 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('******* Create a review Tests current points = ' + points_review_create);",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{invalid_business_id}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. add review 2 no review_text 201 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.environment.set(\"review_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_2\")));",
									"    pm.expect(respJSON[\"stars\"]).to.eq(3);",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"\");",
									"    pm.expect(respJSON).to.have.property(\"id\");",
									"    pm.expect(respJSON[\"id\"]).to.be.a('number');",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/reviews/' + respJSON[\"id\"]);",
									"    pm.expect(respJSON[\"business\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));",
									"    points += 1;",
									"});",
									"",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Create a review Test 6 points = ' + points);",
									"let points_review_create = pm.environment.get(\"points_review_create\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Create a review Tests Total points = ' + points_review_create);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_review_create\", points_review_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_2}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Get a review (5 pts)",
			"item": [
				{
					"name": "1. get review 200 (3 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(\r",
									"        parseInt(pm.environment.get(\"user_id_1\")));\r",
									"    pm.expect(respJSON[\"stars\"]).to.eq(4);\r",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"Excellent tacos!\");\r",
									"    pm.expect(respJSON).to.have.property(\"id\");\r",
									"    pm.expect(respJSON[\"id\"]).to.be.a('number');\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/reviews/' + respJSON[\"id\"]);\r",
									"    pm.expect(respJSON[\"business\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));\r",
									"    points += 2;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 1 points = ' + points);\r",
									"console.log('******* Get a review Tests current points = ' + points);\r",
									"pm.environment.set(\"points_review_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get review 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");\r",
									"     points += 0.25;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.25;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 2 points = ' + points);\r",
									"let points_review_get = pm.environment.get(\"points_review_get\") + points\r",
									"console.log('******* Get a review Tests current points = ' + points_review_get);\r",
									"pm.environment.set(\"points_review_get\", points_review_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{invalid_review_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{invalid_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. get second review 200 (1 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Get a review Test 3 points = ' + points);\r",
									"let points_review_get = pm.environment.get(\"points_review_get\") + points\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* Get a review Tests Total points = ' + points_review_get);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_review_get\", points_review_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. Edit a review (6 pts)",
			"item": [
				{
					"name": "1. edit review (1 point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.25;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(respJSON[\"stars\"]).to.eq(5);",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/reviews/' + respJSON[\"id\"]);",
									"    pm.expect(respJSON[\"business\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 1 points = ' + points);",
									"console.log('******* Edit a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_edit\", points);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 5,\r\n  \"review_text\": \"Queso is the best.\"\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. get review after update 200 (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.25;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(respJSON[\"stars\"]).to.eq(5);",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/reviews/' + pm.environment.get(\"review_id_1\"));",
									"    pm.expect(respJSON[\"business\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));",
									"    points += 1;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 2 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. edit review with missing attribute 400 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is missing at least one of the required attributes\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"console.log('******* Edit a review Test 3 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"review_text\": \"Queso is the best.\"\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. edit review with invalid id 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");",
									"     points += 0.25;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.25;",
									"});",
									"",
									"",
									"console.log('******* Edit a review Test 4 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('******* Edit a review Tests current points = ' + points_review_edit);",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 5,\r\n  \"review_text\": \"Queso is the best.\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{invalid_review_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{invalid_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. edit review stars only (1.5 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"user_id\"]).to.eq(",
									"        parseInt(pm.environment.get(\"user_id_1\")));",
									"    pm.expect(respJSON[\"stars\"]).to.eq(4);",
									"    pm.expect(respJSON[\"review_text\"]).to.eq(\"Queso is the best.\");",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/reviews/' + pm.environment.get(\"review_id_1\"));",
									"    pm.expect(respJSON[\"business\"]).to.eq(",
									"            pm.environment.get(\"app_url\") + '/businesses/' +  pm.environment.get(\"business_id_2\"));",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"The response content type is application.json\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.5;",
									"});",
									"",
									"console.log('******* Edit a review Test 5 points = ' + points);",
									"let points_review_edit = pm.environment.get(\"points_review_edit\") + points",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('******* Edit a review Tests Total points = ' + points_review_edit);",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"pm.environment.set(\"points_review_edit\", points_review_edit);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stars\": 4\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. Delete a review (5 pts)",
			"item": [
				{
					"name": "1. delete review 204 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"    points += 2;",
									"});",
									"",
									"console.log('******* Delete a review Test 1 points = ' + points);",
									"console.log('******* Delete a review Tests current points = ' + points);",
									"pm.environment.set(\"points_review_delete\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. delete review just deleted 404 (1 pt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    points += 0.5;",
									"});",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");",
									"     points += 0.5;",
									"});",
									"",
									"",
									"console.log('******* Delete a review Test 2 points = ' + points);",
									"let points_review_delete = pm.environment.get(\"points_review_delete\") + points",
									"console.log('******* Delete a review Tests current points = ' + points_review_delete);",
									"pm.environment.set(\"points_review_delete\", points_review_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. get second review business deleted 404 (2 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    points += 1;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No review with this review_id exists\");\r",
									"     points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"console.log('******* Delete a review Test 4 points = ' + points);\r",
									"let points_review_delete = pm.environment.get(\"points_review_delete\") + points\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('******* Delete a review Tests Total points = ' + points_review_delete);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_review_delete\", points_review_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/reviews/{{review_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews",
								"{{review_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11. List all reviews for user (6 pts)",
			"item": [
				{
					"name": "1. add business 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"4900 N Lamar Blvd\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. add second business 201 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"business_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"owner_id\": {{owner_id_1}},\r\n  \"name\": \"Mandola's\",\r\n  \"street_address\": \"321 South Mopac\",\r\n  \"city\": \"Austin\",\r\n  \"state\": \"TX\",\r\n  \"zip_code\": 78751\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/businesses",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. add review business 1 user 1 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"review_id_1\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_1}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent tacos!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. add review business 2 user 1 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"review_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_1}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent queso!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. add review business 2 user 2 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"review_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": {{user_id_2}},\r\n  \"business_id\": {{business_id_2}},\r\n  \"stars\": 4,\r\n  \"review_text\": \"Excellent queso!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. get reviews for user 1 (6 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.5;\r",
									"}); \r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.5;\r",
									"});\r",
									"\r",
									"pm.test(\"At least 2 reviews for user_id_1 exist\", function(){\r",
									"   pm.expect(pm.response.json().filter((review) => review.user_id === parseInt(pm.environment.get(\"user_id_1\"))).length).to.be.at.least(2);\r",
									"   points += 2;\r",
									"});\r",
									"\r",
									"pm.test(\"All reviews are for user_id_1\", function(){\r",
									"    const reviews = pm.response.json();\r",
									"    for (const review of reviews){\r",
									"        pm.expect(review[\"user_id\"]).to.eq(parseInt(pm.environment.get(\"user_id_1\")));\r",
									"    }\r",
									"   points += 2;\r",
									"});\r",
									"\r",
									"pm.test(\"Every reivew has all the required properties\", function(){\r",
									"    const reviews = pm.response.json();\r",
									"    for (const review of reviews){\r",
									"        pm.expect(review).to.have.property(\"id\");\r",
									"        pm.expect(review).to.have.property(\"stars\");\r",
									"        pm.expect(review[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/reviews/' + review[\"id\"]);\r",
									"        pm.expect(review[\"business\"]).to.be.a('string').and.satisfy(msg => msg.startsWith(\r",
									"                pm.environment.get(\"app_url\") + '/businesses/'));\r",
									"    }\r",
									"   points += 1;\r",
									"});\r",
									"\r",
									"console.log('******* List all reviews for user Test 6 points = ' + points);\r",
									"pm.environment.set(\"points_list_reviews\", points);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users/{{user_id_1}}/reviews",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users",
								"{{user_id_1}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. delete business 204 (0 pts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. delete second business 204 (0 points)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"console.log('1. Create a business                   Score = ' + pm.environment.get('points_business_create') + '/6');",
									"console.log('2. Get a business                      Score = ' + pm.environment.get('points_business_get') + '/6');",
									"console.log('3. List all businesses                 Score = ' + pm.environment.get('points_business_list_all') + '/9');",
									"console.log('4. Edit a business                     Score = ' + pm.environment.get('points_business_edit') + '/6');",
									"console.log('5. Delete a business                   Score = ' + pm.environment.get('points_business_delete') + '/6');",
									"console.log('6. List businesses for owner           Score = ' + pm.environment.get('points_list_businesses_for_owner') + '/6');",
									"console.log('7. Create a review                     Score = ' + pm.environment.get('points_review_create') + '/8');",
									"console.log('8. Get a review                        Score = ' + pm.environment.get('points_review_get') + '/5');",
									"console.log('9. Edit a review                       Score = ' + pm.environment.get('points_review_edit') + '/6');",
									"console.log('10. Delete a review                    Score = ' + pm.environment.get('points_review_delete') + '/5');",
									"console.log('11. List all review for user           Score = ' + pm.environment.get('points_list_reviews') + '/6');",
									"",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');",
									"",
									"let total_points = pm.environment.get(\"points_business_create\")",
									"                    + pm.environment.get(\"points_business_get\")",
									"                    + pm.environment.get(\"points_business_list_all\")",
									"                    + pm.environment.get(\"points_business_edit\")",
									"                    + pm.environment.get(\"points_business_delete\")",
									"                    + pm.environment.get(\"points_list_businesses_for_owner\")",
									"                    + pm.environment.get(\"points_review_create\")",
									"                    + pm.environment.get(\"points_review_get\")",
									"                    + pm.environment.get(\"points_review_edit\")",
									"                    + pm.environment.get(\"points_review_delete\")",
									"                    + pm.environment.get(\"points_list_reviews\");",
									"",
									"console.log('******* All Postman Tests                  Score = ' + total_points + '/69');",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/businesses/{{business_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"businesses",
								"{{business_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}